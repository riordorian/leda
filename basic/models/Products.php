<?php

namespace app\models;

use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "products".
 *
 * @property int $id Id
 * @property string $name Название
 * @property string $xml_id Артикул
 * @property string $composition Состав
 * @property string manufacturing Пошив
 * @property string image Изображение
 */
class Products extends ActiveRecord
{
	public $imageInfo = [];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'products';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'xml_id'], 'required'],
			[['composition', 'image'], 'string'],
			[['imageInfo'], 'file'],
			[['manufacturing'], 'number'],
            [['name', 'xml_id'], 'string', 'max' => 150],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'Id'),
            'name' => Yii::t('app', 'Название'),
            'xml_id' => Yii::t('app', 'Артикул'),
            'composition' => Yii::t('app', 'Состав'),
			'manufacturing' => Yii::t('app', 'Пошив'),
			'image' => Yii::t('app', 'Изображение'),
		];
    }

    public function beforeValidate()
	{
		if (is_array($this->composition)){
			$this->composition = json_encode($this->composition);
		}

		return parent::beforeValidate(); // TODO: Change the autogenerated stub
	}


	/**
	 * @param string $composition
	 *
	 * @return array
	 */
	public static function getCompositionInfo(string $composition, $manufacturing = 0, $bSeparate = false)
	{
		$arResult = ['composition' => [], 'price' => [
			'base' => 0,
			'fullBase' => 0,
			'wholeSale' => 0,
			'retail' => 0,
		]];
		$arComposition = json_decode($composition, true);
		$arEntities = [
			Textile::class => [],
			Furniture::class => [],
		];

		# Get all ingredients info
		foreach ($arEntities as $entityClass => $v) {
			if (!class_exists($entityClass)) {
				continue;
			}

			$arEntities[$entityClass] = $entityClass::find()->asArray()->all();
			$arResult['composition'][$entityClass::entityLabel()] = [];
		}


		foreach ($arComposition as $groupClass => $arGroup){
			$arGroup = array_filter($arGroup, function ($item){
				if (is_array($item)){
					return !empty(array_filter(array_values($item)));
				}
				else{
					return !empty($item);
				}
			});
			
			foreach ($arGroup as $itemId => $ingredients){
				$entityLabel = $groupClass::entityLabel();

				# Get the ingredient info
				$arIngredientInfo = array_filter($arEntities[$groupClass], function($arItem) use ($itemId) {
					return $arItem['id'] == $itemId;
				});

				if (empty($arIngredientInfo)){
				    continue;
				}

				$arIngredientInfo = reset($arIngredientInfo);
				$ingredientName = implode(' - ', [$arIngredientInfo['name'], $arIngredientInfo['color']]);


				# Price building
				$ingredientPartK = is_array($ingredients) ? (($ingredients['width'] * $ingredients['height']) / ($arIngredientInfo['width'] * $arIngredientInfo['height'])) : 0;
				$ingredientPrice = (is_array($ingredients) ? $ingredientPartK : $ingredients) * $arIngredientInfo['total_price'];
				$arResult['price']['base'] += $ingredientPrice;

				if (!$bSeparate) {
					$arResult['composition'][$entityLabel][$ingredientName] = (is_array($ingredients) ? implode('x', $ingredients) : $ingredients) . ' ' . $arIngredientInfo['unit'];
					$arResult['composition'][$entityLabel][$ingredientName] .= ' (' . $ingredientPrice . ' руб.)';
				}
				else{
					$arResult['composition'][$entityLabel][$ingredientName] = [];
					$arResult['composition'][$entityLabel][$ingredientName]['price'] = $ingredientPrice;
					$arResult['composition'][$entityLabel][$ingredientName]['amount'] = is_array($ingredients) ? $ingredients['width'] : $ingredients;
				}
			}
		}

		$arResult['price']['base'] += 25 + $manufacturing;
		$arResult['price']['base'] = round($arResult['price']['base']);
		$arResult['price']['fullBase'] = round($arResult['price']['base'] * 1.06 + 150);
		$arResult['price']['wholeSale'] = round($arResult['price']['fullBase'] * 2.8);
		$arResult['price']['retail'] = round($arResult['price']['wholeSale'] * 2);

		return $arResult;
	}
}
